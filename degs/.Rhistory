fontsize_row = 12,
fontsize_col = 6,
border = FALSE)
pheatmap(hmexp,
annotation_col = annotation_col,
color = colorRampPalette(c("blue","white","red"))(50),
cluster_cols = F,
show_rownames = F,
show_colnames = F,
scale = "row", ## none, row, column
fontsize = 12,
fontsize_row = 12,
fontsize_col = 6,
border = FALSE)
View(annotation_col)
hmexp <- na.omit(DEG_exp)
## 样本注释信息
annotation_col <- data.frame(Group = factor(c(rep("Wild", 429), rep("Mut",75))))
rownames(annotation_col) <- colnames(hmexp)
pheatmap(hmexp,
annotation_col = annotation_col,
color = colorRampPalette(c("blue","white","red"))(50),
cluster_cols = F,
show_rownames = F,
show_colnames = F,
scale = "row", ## none, row, column
fontsize = 12,
fontsize_row = 12,
fontsize_col = 6,
border = FALSE)
p1 <- pheatmap(hmexp,
annotation_col = annotation_col,
color = colorRampPalette(c("blue","white","red"))(50),
cluster_cols = F,
show_rownames = F,
show_colnames = F,
scale = "row", ## none, row, column
fontsize = 12,
fontsize_row = 12,
fontsize_col = 6,
border = FALSE)
View(hmexp)
## 本章节，我们是只使用count值进行热图绘制，后续的分子中，我们会对其进行优化
DEG_id <- read.csv("luad-degs-8-22.csv", header = T)
head(DEG_id)
## 匹配
DEG_id <- unique(DEG_id$X)
DEG_exp <- df[DEG_id,]
hmexp <- na.omit(DEG_exp)
## 样本注释信息
annotation_col <- data.frame(Group = factor(c(rep("Wild", 429), rep("Mut",75))))
rownames(annotation_col) <- colnames(hmexp)
pheatmap(hmexp,
annotation_col = annotation_col,
color = colorRampPalette(c("blue","white","red"))(50),
cluster_cols = F,
show_rownames = F,
show_colnames = F,
scale = "row", ## none, row, column
fontsize = 12,
fontsize_row = 12,
fontsize_col = 6,
border = FALSE)
p1 <- pheatmap(hmexp,
annotation_col = annotation_col,
color = colorRampPalette(c("blue","white","red"))(50),
cluster_cols = F,
show_rownames = F,
show_colnames = F,
scale = "row", ## none, row, column
fontsize = 12,
fontsize_row = 12,
fontsize_col = 6,
border = FALSE)
ggsave("热图-degs-8-22.pdf",p1,width = 6,height = 3,units = "px")
ggsave("热图-degs-8-22.pdf",device = p1,width = 6,height = 3)
ggsave("热图-degs-8-22.pdf",p1,width = 6,height = 3)
library(ReactomePA)
library(tidyverse)
library(data.table)
library(org.Hs.eg.db)
library(clusterProfiler)
library(biomaRt)
library(enrichplot)
install.packages("Z:/r pag/ReactomePA_1.44.0.zip", repos = NULL, type = "win.binary")
library(ReactomePA)
install.packages("Z:/r pag/graphite_1.46.0.zip", repos = NULL, type = "win.binary")
library(ReactomePA)
install.packages("Z:/r pag/reactome.db_1.84.0.tar.gz", repos = NULL, type = "source")
library(ReactomePA)
library(tidyverse)
library(data.table)
library(org.Hs.eg.db)
library(clusterProfiler)
library(biomaRt)
library(enrichplot)
rt = read.csv(file = "luad-degs-8-22.csv",
sep = ",",
header = T)
genes=as.vector(rt[,1])
#取rt的第一列，即基因名字，将其转换为向量，并赋值给genes变量
entrezIDs <- mget(genes, org.Hs.egSYMBOL2EG, ifnotfound=NA)
entrezIDs <- as.character(entrezIDs)
View(rt)
colnames(entrezIDs)[1]<-"Gene"
rt = read.csv(file = "luad-degs-8-22.csv",
sep = ",",
header = T)
genes=as.vector(rt[,1])
gene_map <- select(org.Hs.eg.db, keys=genes, keytype="SYMBOL", columns=c("ENTREZID"))
View(gene_map)
colnames(gene_map)[1]<-"Gene"
aaa<-inner_join(gene_map,genelist_input,by = "Gene")
aaa<-inner_join(gene_map,rt,by = "Gene")
View(rt)
View(rt)
View(gene_map)
rt = read.csv(file = "luad-degs-8-22.csv",
sep = ",",
header = T)
View(rt)
genes=as.vector(rt[,1])
gene_map <- select(org.Hs.eg.db, keys=genes, keytype="SYMBOL", columns=c("ENTREZID"))
colnames(gene_map)[1]<-"Gene"
aaa<-inner_join(gene_map,rt,by = "Gene")
View(aaa)
aaa<-aaa[,-1]
aaa<-na.omit(aaa)
aaa$logFC<-sort(aaa$logFC,decreasing = T)
View(aaa)
View(aaa)
geneList = aaa[,2]
names(geneList) = as.character(aaa[,1])
geneList
#GSEA分析——GO
Go_gseresult <- gseGO(geneList, 'org.Hs.eg.db', keyType = "ENTREZID", ont="all", nPerm = 1000, minGSSize = 10, maxGSSize = 1000, pvalueCutoff=1)
View(Go_gseresult)
head(Go_gseresult)
#GSEA分析——KEGG
KEGG_gseresult <- gseKEGG(geneList, nPerm = 1000, minGSSize = 10, maxGSSize = 1000, pvalueCutoff=1)
head(KEGG_gseresult)
#GSEA分析——Reactome
Go_Reactomeresult <- gsePathway(geneList, nPerm = 1000, minGSSize = 10, maxGSSize = 1000, pvalueCutoff=1)
head(Go_Reactomeresult)
#保存文件
ridgeplot(Go_gseresult,10)
library(ReactomePA)
library(tidyverse)
library(data.table)
library(org.Hs.eg.db)
library(clusterProfiler)
library(biomaRt)
library(enrichplot)
#保存文件
ridgeplot(Go_gseresult,10)
install.packages("Z:/r pag/ggridges_0.5.4.zip", repos = NULL, type = "win.binary")
library(ggridges)
#保存文件
ridgeplot(Go_gseresult,10)
ridgeplot(KEGG_gseresult,10)
ridgeplot(Go_Reactomeresult,10)
#富集曲线图类型1：
gseaplot(Go_Reactomeresult,1,pvalue_table = TRUE) #输出第1个结果
#富集曲线图类型2：
gseaplot2(Go_Reactomeresult,12,pvalue_table = TRUE)#输出第212个结果
#富集曲线图类型2：
gseaplot2(Go_Reactomeresult,1,pvalue_table = TRUE)#输出第212个结果
#gseaplot2还可以同时显示复数个功能组的富集曲线，并标记P值：
gseaplot2(Go_Reactomeresult, 1:4, pvalue_table = TRUE)
head(Go_Reactomeresult)
View(Go_Reactomeresult)
#gseaplot2还可以同时显示复数个功能组的富集曲线，并标记P值：
gseaplot2(Go_Reactomeresult, 5:8, pvalue_table = TRUE)
#gseaplot2还可以同时显示复数个功能组的富集曲线，并标记P值：
gseaplot2(Go_Reactomeresult, 9:12, pvalue_table = TRUE)
ridgeplot(Go_Reactomeresult,10)
ridgeplot(Go_gseresult,10)
#富集曲线图类型1：
gseaplot(Go_gseresult,1,pvalue_table = TRUE) #输出第1个结果
#富集曲线图类型2：
gseaplot2(Go_gseresult,1,pvalue_table = TRUE)#输出第212个结果
View(Go_gseresult)
#富集曲线图类型2：
gseaplot2(Go_gseresult,100,pvalue_table = TRUE)#输出第212个结果
#GSEA分析——GO
Go_gseresult <- gseGO(geneList, 'org.Hs.eg.db', keyType = "ENTREZID", ont="all", nPerm = 1000, minGSSize = 10, maxGSSize = 1000, pvalueCutoff=0.05)
#GSEA分析——KEGG
KEGG_gseresult <- gseKEGG(geneList, nPerm = 1000, minGSSize = 10, maxGSSize = 1000, pvalueCutoff=1)
View(Go_Reactomeresult)
library(msigdbr)
install.packages("msigdbr")
library(msigdbr)
?msigdbr
msigdbr_df <- msigdbr(species = "Homo sapiens",category = "C2")
View(msigdbr_df)
library(ReactomePA)
library(tidyverse)
library(data.table)
library(org.Hs.eg.db)
library(clusterProfiler)
library(biomaRt)
library(enrichplot)
library(ggridges)
library(msigdbr)
rt = read.csv(file = "luad-degs-8-22.csv",
sep = ",",
header = T)
geneList <- rt$logFC
# 如果是Ensemble ID，并且如果还带着版本号，需要去除版本号，再进行基因ID转换，得到Entrez ID
names(geneList) <- rt$Gene
#取rt的第一列，即基因名字，将其转换为向量，并赋值给genes变量
# 最后从大到小排序，得到一个字符串
geneList <- sort(geneList, decreasing = T)
# 检查是否有重复基因名
genelist <- dif_genes$gene_id
# 检查是否有重复基因名
genelist <- rt$gene_id
genelist[duplicated(genelist)]
rt = read.csv(file = "luad-degs-8-22.csv",
sep = ",",
header = T)
geneList <- rt$logFC
# 如果是Ensemble ID，并且如果还带着版本号，需要去除版本号，再进行基因ID转换，得到Entrez ID
names(geneList) <- rt$Gene
#取rt的第一列，即基因名字，将其转换为向量，并赋值给genes变量
# 最后从大到小排序，得到一个字符串
geneList <- sort(geneList, decreasing = T)
# 检查是否有重复基因名
genelist <- rt$gene_id
genelist[duplicated(genelist)]
msigdbr_df <- msigdbr(species = "Homo sapiens",category = "C2")
msigdbr_t2g <- msigdbr_df %>% dplyr::distinct(gs_name, gene_symbol) %>% as.data.frame()
View(msigdbr_t2g)
gsea_result <- GSEA(geneList = geneList,
minGSSize = 1,
maxGSSize = 1000,
pvalueCutoff = 1,
TERM2GENE = msigdbr_t2g)
View(gsea_result)
gsea_result <- GSEA(geneList = geneList,
minGSSize = 1,
maxGSSize = 1000,
pvalueCutoff = 0.1,
TERM2GENE = msigdbr_t2g)
View(gsea_result)
gsea_result <- GSEA(geneList = geneList,
minGSSize = 1,
maxGSSize = 1000,
pvalueCutoff = 1,
TERM2GENE = msigdbr_t2g)
gseaplot2(gsea_result, geneSetID = c("PATHWAY_NAME"))
gseaplot2(gsea_result, geneSetID = c("PATHWAY_NAME"))
gseaplot2(gsea_result, geneSetID = c("PATHWAY_NAME"), pvalue_table = TRUE)
gseaplot(gsea_result,1,pvalue_table = TRUE)
gseaplot2(gsea_result,1,pvalue_table = TRUE)
gsea_result <- GSEA(geneList = geneList,
minGSSize = 1,
maxGSSize = 1000,
pvalueCutoff = 0.5,
TERM2GENE = msigdbr_t2g)
View(gsea_result)
gseaplot2(gsea_result,100,pvalue_table = TRUE)
gsea_result <- GSEA(geneList = geneList,
minGSSize = 1,
maxGSSize = 1000,
pvalueCutoff = 0.1,
TERM2GENE = msigdbr_t2g)
View(gsea_result)
gsea_result <- GSEA(geneList = geneList,
minGSSize = 1,
maxGSSize = 1000,
pvalueCutoff = 0.05,
TERM2GENE = msigdbr_t2g)
gsea_result <- GSEA(geneList = geneList,
minGSSize = 1,
maxGSSize = 1000,
pvalueCutoff = 1,
TERM2GENE = msigdbr_t2g)
gseaplot2(gsea_result,100,pvalue_table = TRUE, color = "firebrick")
gseaplot2(gsea_result,100,pvalue_table = TRUE, color = "firebrick", rel_heights=c(1, .2, .6))
gseaplot2(gsea_result,100,pvalue_table = F, color = "firebrick", rel_heights=c(1, .2, .6))
gsea_result <- GSEA(geneList = geneList,
minGSSize = 1,
maxGSSize = 1000,
pvalueCutoff = 0.5,
TERM2GENE = msigdbr_t2g)
View(gsea_result)
gsea_result <- GSEA(geneList = geneList,
minGSSize = 1,
maxGSSize = 1000,
pvalueCutoff = 0.07,
TERM2GENE = msigdbr_t2g)
View(gsea_result)
gseaplot2(gsea_result,1,pvalue_table = T, color = "firebrick", rel_heights=c(1, .2, .6))
gsea_result <- GSEA(geneList = geneList,
minGSSize = 1,
maxGSSize = 1000,
pvalueCutoff = 0.08,
TERM2GENE = msigdbr_t2g)
gsea_result <- GSEA(geneList = geneList,
minGSSize = 1,
maxGSSize = 1000,
pvalueCutoff = 0.09,
TERM2GENE = msigdbr_t2g)
gsea_result <- GSEA(geneList = geneList,
minGSSize = 1,
maxGSSize = 1000,
pvalueCutoff = 0.1,
TERM2GENE = msigdbr_t2g)
gsea_result <- GSEA(geneList = geneList,
minGSSize = 1,
maxGSSize = 1000,
pvalueCutoff = 0.5,
TERM2GENE = msigdbr_t2g)
View(gsea_result)
gseaplot2(gsea_result,2,pvalue_table = T, color = "firebrick", rel_heights=c(1, .2, .6))
gseaplot2(gsea_result,1,pvalue_table = T, color = "firebrick", rel_heights=c(1, .2, .6))
gsea_result <- GSEA(geneList = geneList,
minGSSize = 1,
maxGSSize = 1000,
pvalueCutoff = 0.2,
TERM2GENE = msigdbr_t2g)
rt = read.csv(file = "luad-degs-8-22.csv",
sep = ",",
header = T)
geneList <- rt$logFC
# 如果是Ensemble ID，并且如果还带着版本号，需要去除版本号，再进行基因ID转换，得到Entrez ID
names(geneList) <- rt$Gene
#取rt的第一列，即基因名字，将其转换为向量，并赋值给genes变量
# 最后从大到小排序，得到一个字符串
geneList <- sort(geneList, decreasing = T)
# 检查是否有重复基因名
genelist <- rt$gene_id
genelist[duplicated(genelist)]
msigdbr_df <- msigdbr(species = "Homo sapiens",category = "C2")
msigdbr_t2g <- msigdbr_df %>% dplyr::distinct(gs_name, gene_symbol) %>% as.data.frame()
gsea_result <- GSEA(geneList = geneList,
minGSSize = 1,
maxGSSize = 1000,
pvalueCutoff = 0.2,
TERM2GENE = msigdbr_t2g)
View(gsea_result)
head(gsea_result)
View(gsea_result)
gsea_result <- GSEA(geneList = geneList,
minGSSize = 1,
maxGSSize = 1000,
pvalueCutoff = 0.07,
TERM2GENE = msigdbr_t2g)
gsea_result <- GSEA(geneList = geneList,
minGSSize = 1,
maxGSSize = 1000,
pvalueCutoff = 0.09,
TERM2GENE = msigdbr_t2g)
gsea_result <- GSEA(geneList = geneList,
minGSSize = 1,
maxGSSize = 1000,
pvalueCutoff = 0.1,
TERM2GENE = msigdbr_t2g)
gsea_result <- GSEA(geneList = geneList,
minGSSize = 1,
maxGSSize = 1000,
pvalueCutoff = 0.5,
TERM2GENE = msigdbr_t2g)
View(gsea_result)
gseaplot2(gsea_result, 9:12, pvalue_table = TRUE)
gseaplot2(gsea_result, 1, pvalue_table = TRUE)
gseaplot2(gsea_result, 1:4, pvalue_table = TRUE, color = "firebrick")
gseaplot2(gsea_result, 1:4, pvalue_table = TRUE, color = "firebrick",, p.adjust.method = NULL)
gseaplot2(gsea_result, 1:4, pvalue_table = TRUE, color = "firebrick", p.adjust.method = NULL)
?gseaplot2
kk <- gseKEGG(geneList = geneList,
organism = 'hsa',
nPerm = 1000,
minGSSize = 10,
maxGSSize = 500,
pvalueCutoff = 1,
verbose = FALSE)
kk <- gseKEGG(geneList = geneList,
organism = 'hsa',
nPerm = 1000,
minGSSize = 10,
maxGSSize = 500,
pvalueCutoff = 1,
verbose = FALSE)
kk <- gseKEGG(geneList = geneList,
organism = 'hsa',
nPerm = 1000,
minGSSize = 10,
maxGSSize = 500,
pvalueCutoff = 1,
verbose = FALSE)
Go_Reactomeresult <- gsePathway(geneList, nPerm = 1000, minGSSize = 10, maxGSSize = 1000, pvalueCutoff=1)
KEGG_gseresult <- gseKEGG(geneList, nPerm = 1000, minGSSize = 10, maxGSSize = 1000, pvalueCutoff=1)
kk <- gseKEGG(geneList = geneList,
organism = 'hsa',
nPerm = 1000,
minGSSize = 10,
maxGSSize = 500,
pvalueCutoff = 1,
verbose = FALSE)
library(ReactomePA)
library(tidyverse)
library(data.table)
library(org.Hs.eg.db)
library(clusterProfiler)
library(biomaRt)
library(enrichplot)
library(ggridges)
library(msigdbr)
rt = read.csv(file = "luad-degs-8-22.csv",
sep = ",",
header = T)
genes=as.vector(rt[,1])
gene_map <- select(org.Hs.eg.db, keys=genes, keytype="SYMBOL", columns=c("ENTREZID"))
colnames(gene_map)[1]<-"Gene"
aaa<-inner_join(gene_map,rt,by = "Gene")
aaa<-aaa[,-1]
aaa<-na.omit(aaa)
aaa$logFC<-sort(aaa$logFC,decreasing = T)
geneList = aaa[,2]
names(geneList) = as.character(aaa[,1])
geneList
#GSEA分析——GO
Go_gseresult <- gseGO(geneList, 'org.Hs.eg.db', keyType = "ENTREZID", ont="all", nPerm = 1000, minGSSize = 10, maxGSSize = 1000, pvalueCutoff=0.05)
#GSEA分析——GO
Go_gseresult <- gseGO(geneList, 'org.Hs.eg.db', keyType = "ENTREZID", ont="all", nPerm = 1000, minGSSize = 10, maxGSSize = 1000, pvalueCutoff=1)
View(gene_map)
View(Go_gseresult)
head(Go_gseresult)
#GSEA分析——KEGG
KEGG_gseresult <- gseKEGG(geneList, nPerm = 1000, minGSSize = 10, maxGSSize = 1000, pvalueCutoff=1)
View(KEGG_gseresult)
View(KEGG_gseresult)
View(KEGG_gseresult)
####### Info of the Project ########
project <- 'TCGA-COAD'
clinicaldir <- "./data"
###--------方式二：GDCRNATools包下载
library(GDCRNATools)
####-----------------------xml格式的临床数据整理----------------
###-------方式一
library(XML)
library(methods)
xmlFileNames<-dir(path = clinicaldir,full.names = T,
pattern="xml$",recursive = T) #list.files()函数也行
AllPatiCliniList <- lapply(xmlFileNames,
function(x){#x=xmlFileNames[1]
result <- xmlParse(file = x)
rootnode <- xmlRoot(result)
xmldataframe <- xmlToDataFrame(rootnode[2])
return(t(xmldataframe))})
AllPatiCliniList  <- t(do.call(cbind,AllPatiCliniList))
pClinData <- data.frame(Barcode = AllPatiCliniList[,"bcr_patient_barcode"],
Vital_status = AllPatiCliniList[,"vital_status"],
days_to_death = AllPatiCliniList[,"days_to_death"],
days_to_last_known_alive = AllPatiCliniList[,"days_to_last_known_alive"],
lastFollowupTime = AllPatiCliniList[,"days_to_last_followup"],
Stage = AllPatiCliniList[,"stage_event"],
sex = AllPatiCliniList[,"gender"])
rm(list = ls())
options(stringsAsFactors = F)
project <- 'TCGA-COAD'
clinicaldir <- "./data"
library(XML)
library(methods)
xmlFileNames<-dir(path = clinicaldir,full.names = T,
pattern="xml$",recursive = T)
AllPatiCliniList <- lapply(xmlFileNames,
function(x){#x=xmlFileNames[1]
result <- xmlParse(file = x)
rootnode <- xmlRoot(result)
xmldataframe <- xmlToDataFrame(rootnode[2])
return(t(xmldataframe))})
View(AllPatiCliniList)
AllPatiCliniList  <- t(do.call(cbind,AllPatiCliniList))
project <- 'TCGA-COAD'
clinicaldir <- "./data"
library(XML)
library(methods)
xmlFileNames<-dir(path = clinicaldir,full.names = T,
pattern="xml$",recursive = T)
AllPatiCliniList <- lapply(xmlFileNames,
function(x){#x=xmlFileNames[1]
result <- xmlParse(file = x)
rootnode <- xmlRoot(result)
xmldataframe <- xmlToDataFrame(rootnode[2])
return(t(xmldataframe))})
View(AllPatiCliniList)
View(AllPatiCliniList)
library("clusterProfiler")
library("org.Hs.eg.db")
library("enrichplot")
library("ggplot2")
library(GOplot)
rt = read.csv(file = "luad-degs-8-22.csv",
sep = ",",
header = T)
genes=as.vector(rt[,1])
#取rt的第一列，即基因名字，将其转换为向量，并赋值给genes变量
entrezIDs <- mget(genes, org.Hs.egSYMBOL2EG, ifnotfound=NA)
entrezIDs <- as.character(entrezIDs)
out=cbind(rt,entrezID=entrezIDs)
gene=out$entrezID
kk <- enrichGO(gene = gene,
OrgDb = org.Hs.eg.db,
pvalueCutoff =0.05,
qvalueCutoff = 0.05,
ont="all",
readable =T)
dotplot(kk,showCategory = 10,split="ONTOLOGY",font.size=8) + facet_grid(ONTOLOGY~., scale='free')
barplot(kk, drop = TRUE, showCategory =10,split="ONTOLOGY") + facet_grid(ONTOLOGY~., scale='free')
